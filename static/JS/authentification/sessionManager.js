// =============================================================
// üìÅ sessionManager.js
// -------------------------------------------------------------
// Ce module g√®re toute la logique de session utilisateur c√¥t√© client,
// notamment la persistance de la connexion, l'affichage dynamique
// des informations utilisateur dans le menu, et la d√©connexion.
//
// üéØ Objectif :
// Offrir une exp√©rience fluide o√π l'utilisateur reste connect√©
// entre les rechargements de page, et peut se d√©connecter proprement.
//
// üîß Fonctionnalit√©s :
// - ‚úÖ `checkLoginOnLoad()`
//   ‚Üí V√©rifie si un utilisateur est d√©j√† connect√© (via `localStorage`),
//   ‚Üí Si oui, affiche automatiquement son menu et ses infos.
//
// - ‚úÖ `showUserInfo(firstName, name, email, phone, userId)`
//   ‚Üí Enregistre les infos utilisateur dans `localStorage`,
//   ‚Üí Met √† jour dynamiquement le menu utilisateur dans le header,
//   ‚Üí Affiche un avatar, nom complet, et un bouton pour se d√©connecter.
//
// - ‚úÖ `logoutUser()`
//   ‚Üí Vide le `localStorage`,
//   ‚Üí R√©initialise les champs de login,
//   ‚Üí R√©affiche le bouton "Se connecter", cache le menu utilisateur.
//
// üë§ Stocke les infos suivantes dans le localStorage :
// - `user_id`, `first_name`, `name`, `email`, `phone`
//
// üß© Utilis√© dans :
// - `index.js` (au chargement global),
// - `authHandlers.js` (apr√®s login / inscription),
// - `header`, `paiement.html`, `reservations.html`, etc.
//
// ‚ö†Ô∏è Pr√©requis HTML :
// - Un bouton `#loginButton` pour la connexion,
// - Un conteneur `#user-menu-container` + menu d√©roulant `#user-dropdown`,
// - Un lien `#logout-link` pour la d√©connexion,
// - Un bouton menu `#user-menu-button`,
// - Un √©l√©ment `#user-fullname` pour le nom affich√©.
//
// ‚úÖ Fournit une gestion simple et fiable de l‚Äô√©tat connect√©/d√©connect√©.
// =============================================================


// ============================
// ‚ôªÔ∏è Connexion persistante au rechargement
// ============================

// ‚úÖ Connexion persistante au rechargement
function checkLoginOnLoad() {
    console.log("‚úÖ checkLoginOnLoad() lanc√©");
    const userId = localStorage.getItem("user_id");
    const firstName = localStorage.getItem("first_name");
    const name = localStorage.getItem("name");
    const email = localStorage.getItem("email");
    const phone = localStorage.getItem("phone");

    if (firstName && name) {
        showUserInfo(firstName, name, email, phone, userId);
    }
}

// ‚úÖ Affichage des infos utilisateur apr√®s connexion
function showUserInfo(firstName, name, email, phone, userId = null) {
    if (userId) localStorage.setItem("user_id", userId);
    localStorage.setItem("first_name", firstName);
    localStorage.setItem("name", name);
    localStorage.setItem("email", email);
    localStorage.setItem("phone", phone);

    // Masquer bouton login
    const loginBtn = document.getElementById("loginButton");
    if (loginBtn) loginBtn.style.display = "none";

    // Afficher le menu utilisateur
    const userMenu = document.getElementById("user-menu-container");
    const fullNameElement = document.getElementById("user-fullname");
    if (userMenu && fullNameElement) {
        fullNameElement.textContent = `${firstName} ${name}`;
        userMenu.style.display = "inline-block";
    }

    // ‚úÖ Avatar personnalis√©
    const avatarPath = "/static/Image/avatars/remy.png"; // üîÅ pourra devenir dynamique plus tard
    const menuButton = document.getElementById("user-menu-button");
    if (menuButton) {
        menuButton.innerHTML = `
            <img src="${avatarPath}" alt="Avatar" class="avatar-icon" />
            ${firstName} ‚ñº
        `;
    }

    // Bascule du dropdown
    const dropdown = document.getElementById("user-dropdown");
    if (menuButton && dropdown) {
        menuButton.onclick = () => {
            dropdown.classList.toggle("hidden");
        };
    }

    // D√©connexion
    const logoutLink = document.getElementById("logout-link");
    if (logoutLink) {
        logoutLink.addEventListener("click", (e) => {
            e.preventDefault();
            logoutUser(); // ta fonction existante
        });
    }

    // üß† Ferme le menu utilisateur si clic en dehors
    document.addEventListener("click", function (event) {
        const isClickInsideMenu = userMenu.contains(event.target);
        const isClickOnButton = menuButton.contains(event.target);

        if (!isClickInsideMenu && !isClickOnButton) {
            dropdown.classList.add("hidden");
        }
    });
}

// ‚úÖ D√©connexion de l'utilisateur
function logoutUser() {
    localStorage.clear();

    // R√©affiche le bouton login
    const loginBtn = document.getElementById("loginButton");
    if (loginBtn) loginBtn.style.display = "inline-block";

    // Cache le menu utilisateur
    const userMenu = document.getElementById("user-menu-container");
    if (userMenu) userMenu.style.display = "none";

    // üîê Vide les champs de login
    const loginEmail = document.getElementById("login-email");
    const loginPassword = document.getElementById("login-password");
    if (loginEmail) loginEmail.value = "";
    if (loginPassword) loginPassword.value = "";
}


export { checkLoginOnLoad, showUserInfo, logoutUser };