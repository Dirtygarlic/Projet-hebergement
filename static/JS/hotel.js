let isGlobalSearchActive = false;

// Creation d un dictionnaire d icones pour les equipements
const equipmentIcons = {
    "Parking": "üöó",
    "Restaurant": "üçΩÔ∏è",
    "Piscine": "üèä",
    "Animaux admis": "üêæ",
    "Salle de sport": "üèãÔ∏è",
    "Spa": "üíÜ",
    "Wi-Fi gratuit": "üì∂",
    "Climatisation": "‚ùÑÔ∏è",
    "Borne recharge": "‚ö°",
    "Acc√®s PMR": "‚ôø",
    "Machine √† laver": "üß∫",
    "Kitchenette": "üç≥"
};

// üîÑ Initialisation de Flatpickr pour la s√©lection des dates
flatpickr.localize(flatpickr.l10ns.fr);

if (typeof flatpickr !== "undefined") {
    flatpickr("#date-range, #dateRange", {
        mode: "range",
        dateFormat: "Y-m-d",
        minDate: "today",
        locale: "fr",
    });
} else {
    console.error("Flatpickr n'est pas charg√© correctement.");
}

// üîπ Variable pour √©viter de recharger les h√¥tels apr√®s un filtrage
let isFiltering = false;

// üé® Fonction pour afficher les h√¥tels dans la page
function renderHotels(hotels) {
    const container = document.getElementById("hotels-list"); // L'√©l√©ment qui contient les r√©sultats
    container.innerHTML = '';

    // ‚úÖ Gestion du compteur d'h√¥tels
    const countElement = document.getElementById("hotel-count"); // Assure-toi que cet √©l√©ment existe
    if (countElement) {
        countElement.innerHTML = hotels.length > 0
            ? `<strong style="color: green;">Nombre d'h√¥tels trouv√©s : ${hotels.length}</strong>`
            : `<strong style="color: red;">Aucun h√¥tel trouv√©</strong>`;
    }

    if (hotels.length === 0) {
        container.innerHTML = `
            <div class="alert text-center d-flex flex-column align-items-center justify-content-center" role="alert" 
                 style="color: red; font-weight: bold; min-height: 300px; display: flex; flex-direction: column; text-align: center;">
                <img src="https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExb3JmdTVrem5seG9iZTR3bnIzNDE1NjVnM2dzdnBlOWRlcXZnM3NibSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/UC0bLicVsCTnhtGaBq/giphy.gif" 
                     alt="D√©sol√©" 
                     style="width: 500px; height: auto; margin-bottom: 10px;">
                <br>OUPS ! Veuillez modifier votre recherche.
            </div>`;
        return;
    }       

    hotels.forEach(hotel => {
        const hotelDiv = document.createElement('div');
        hotelDiv.className = 'hotel col-lg-12 d-flex align-items-center border p-3 mb-3';

         // üîç Ajout du log pour v√©rifier les valeurs avant redirection
        console.log("üîç H√¥tel s√©lectionn√© avant redirection :", {
            name: hotel.name,
            address: hotel.address,
            description: hotel.description
        });

        const reservationLink = `/reservations?name=${encodeURIComponent(hotel.name)}`
        + `&stars=${hotel.stars}`
        + `&rating=${encodeURIComponent(hotel.hotel_rating || "N/A")}`
        + `&equipments=${encodeURIComponent(hotel.equipments?.join(", ") || "Aucun √©quipement")}`
        + `&price=${hotel.price_per_night}`
        + `&image=${encodeURIComponent(hotel.image || "/static/Image/default.jpg")}`
        + `&address=${encodeURIComponent(hotel.address && hotel.address !== "null" ? hotel.address : "Adresse inconnue")}`
        + `&description=${encodeURIComponent(hotel.description && hotel.description !== "null" ? hotel.description : "Aucune description disponible")}`
        + `&lat=${hotel.latitude || ""}`  // üîπ Ajout des coordonn√©es latitude
        + `&lng=${hotel.longitude || ""}`; // üîπ Ajout des coordonn√©es longitude

        hotelDiv.innerHTML = `
            <div class="hotel-info">
                <h2>${hotel.name} <span>${'‚≠ê'.repeat(hotel.stars)}</span></h2>
                <p><strong>Lieu :</strong> ${hotel.city}, ${hotel.country || ""}</p>
                <p><strong>Prix :</strong> <span style="color: #e74c3c; font-weight: bold;">${hotel.price_per_night} ‚Ç¨ / nuit</span></p>
                <p><strong>Note :</strong> <span style="color: #27ae60; font-weight: bold;">${hotel.hotel_rating || "N/A"}</span></p>
                <p><strong>√âquipements :</strong> ${hotel.equipments?.join(", ") || "Aucun √©quipement"}</p>
            </div>
            <div class="hotel-img-container">
                <img src="${hotel.image || "/static/Image/default.jpg"}" 
                class="img-fluid rounded mb-2" 
                style="max-height: 200px; width: 100%; object-fit: cover;">
            </div>
            <div class="hotel-action">
                <a href="${reservationLink}" class="reserve-button" onclick="redirectToReservation(${hotel.id})">R√©server</a>
            </div>
        `;
        container.appendChild(hotelDiv);
    });
}

// üì° R√©cup√©ration de tous les h√¥tels au chargement de la page
async function fetchAllHotels() {
    if (isFiltering) return;

    console.log("üîÑ Chargement de tous les h√¥tels...");

    try {
        const response = await fetch('/hotels');
        if (!response.ok) throw new Error(`Erreur: ${response.statusText}`);

        const hotels = await response.json();
        console.log("‚úÖ H√¥tels charg√©s :", hotels);
        renderHotels(hotels);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des h√¥tels :', error);
    }
}

// üì° R√©cup√©ration des h√¥tels filtr√©s
async function fetchHotels(filters = {}) {
    console.log("üîç Appel API avec filtres :", filters);
    try {
        console.log("üì° Envoi de la requ√™te √† filter_hotels...");
        const response = await fetch('/filter_hotels', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error(`Erreur: ${response.statusText}`);

        const hotels = await response.json();
        console.log("‚úÖ R√©ponse compl√®te des h√¥tels apr√®s filtrage :", hotels);
        renderHotels(hotels);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des h√¥tels :', error);
        isFiltering = false;  // ‚úÖ Permet de refaire une requ√™te apr√®s une erreur
        isGlobalSearchActive = false;  // ‚úÖ Assurer que la recherche globale ne bloque pas le filtrage
    }
}

document.getElementById("search-form").addEventListener("submit", function (event) {
    event.preventDefault(); // üî• Emp√™che la soumission classique

    isGlobalSearchActive = true; // üöÄ Active l'√©tat de recherche globale

    // üîç R√©cup√®re les valeurs du formulaire
    const dateRange = document.getElementById("date-range").value.trim().split(" au ");
    const filters = {
        destination: document.getElementById("city").value.trim(),
        start_date: dateRange.length === 2 ? dateRange[0] : null,
        end_date: dateRange.length === 2 ? dateRange[1] : null,
        adults: parseInt(document.getElementById("adults").value, 10),
        children: parseInt(document.getElementById("children").value, 10),
        pets: document.getElementById("pets").checked ? 1 : 0
    };

    if (!filters.start_date || !filters.end_date) {
        alert("Veuillez s√©lectionner une p√©riode de s√©jour.");
        isGlobalSearchActive = false; // ‚ùå D√©sactive la recherche globale si annulation
        return; 
    }

    console.log("üìå Recherche globale envoy√©e :", filters);

    fetch("/recherche", {
        method: "POST",
        headers: { "Content-Type": "application/json" }, // ‚úÖ JSON obligatoire
        body: JSON.stringify(filters)
    })
    .then(response => {
        if (!response.ok) throw new Error(`Erreur: ${response.statusText}`);
        return response.json();
    })
    .then(hotels => {
        console.log("‚úÖ H√¥tels trouv√©s via recherche g√©n√©rale :", hotels);
        renderHotels(hotels);
        isGlobalSearchActive = false; // ‚úÖ D√©sactive la recherche globale apr√®s succ√®s
    })
    .catch(error => {
        console.error("‚ùå Erreur lors de l'appel √† l'API recherche :", error);
        isGlobalSearchActive = false; // ‚ùå D√©sactive en cas d‚Äôerreur
    });
});

// üè® Application des filtres pour la recherche d'h√¥tels
function applyFilters() {
        console.log("üöÄ applyFilters() appel√© !");
    // if (document.activeElement.form && document.activeElement.form.id === "search-form") {
        if (isGlobalSearchActive) {
            console.warn("‚ö†Ô∏è Filtrage bloqu√© : Une recherche globale est en cours.");
            return;
        }        

    isFiltering = true;

    const filters = {
        stars: [...document.querySelectorAll('input[name="stars"]:checked')].map(i => parseInt(i.value, 10)),
        max_price: parseInt(document.getElementById('maxPrice')?.value || "500", 10),
        max_rooms: parseInt(document.getElementById('maxRooms')?.value || "70", 10),
        hotel_name: document.getElementById('hotelName')?.value.trim() || null,
        city_name: document.getElementById('cityInput')?.value.trim() || null
    };

    // ‚úÖ Regroupement des √©quipements sous un seul objet
    const equipements = ["parking", "restaurant", "piscine", "pets_allowed", "washing_machine", "wheelchair_accessible", "gym", "spa", "free_wifi", "air_conditioning", "ev_charging", "kitchenette"];
    equipements.forEach(equip => {
        filters[equip] = document.getElementById(equip)?.checked ? 1 : null;
    });

    // ‚úÖ Gestion filtre note des clients
    const ratingCheckboxes = document.querySelectorAll('input[name="hotel_rating"]:checked');
    const hotelRatings = Array.from(ratingCheckboxes).map(input => parseFloat(input.value));
    if (hotelRatings.length > 0) {
        filters.hotel_rating = hotelRatings;
    }

    // ‚úÖ Gestion filtre restauration
    filters.meal_plan = Array.from(document.querySelectorAll('input[name="meal_plan"]:checked')).map(input => input.value);

    // ‚úÖ Nettoyage des filtres vides
    Object.keys(filters).forEach(key => {
        if (filters[key] === null || (Array.isArray(filters[key]) && filters[key].length === 0) || filters[key] === '') {
            delete filters[key];
        }
    });

    console.log("üìå Filtres envoy√©s apr√®s nettoyage :", filters);
    fetchHotels(filters).then(() => {
        isFiltering = false;
    });
}

// ‚ôªÔ∏è R√©initialisation des filtres
function resetFilters() {
    console.log("‚ôªÔ∏è R√©initialisation des filtres...");
    
    isGlobalSearchActive = false; // ‚úÖ R√©active les filtres sp√©cifiques
    document.getElementById('filterForm').reset();
    const cityInput = document.getElementById('cityInput');
    if (cityInput) cityInput.value = ""; 

    if (!isFiltering) {
        fetchAllHotels();
    }
}

// ‚úàÔ∏è G√®re l'autocompl√©tion pour la destination (continent, pays, ville)
function autoComplete(query) {
    if (query.length < 3) {
        document.getElementById("suggestions").innerHTML = "";
        return;
    }

    fetch(`/autocomplete?query=${query}`)
        .then(response => response.json())
        .then(data => {
            let suggestionsList = document.getElementById("suggestions");
            suggestionsList.innerHTML = "";

            data.forEach(item => {
                let listItem = document.createElement("li");
                listItem.textContent = item;
                listItem.onclick = function () {
                    document.getElementById("city").value = item;
                    suggestionsList.innerHTML = "";
                };
                suggestionsList.appendChild(listItem);
            });
        })
        .catch(error => console.error("Erreur d'autocompl√©tion :", error));
}

// üìå R√©cup√©rer les param√®tres GET de l'URL
function getURLParams() {
    const params = new URLSearchParams(window.location.search);
    return {
        destination: params.get("destination") || "",
        start_date: params.get("start_date") || "",
        end_date: params.get("end_date") || "",
        adults: params.get("adults") || "1",
        children: params.get("children") || "0",
        pets: params.get("pets") || "0"
    };
}

// üì° Appliquer les filtres re√ßus depuis `index.html` dans `hotel.html`
async function fetchFilteredHotels() {
    const filters = getURLParams(); // R√©cup√©ration des filtres

    // üö® V√©rification que les dates sont bien pr√©sentes
    if (!filters.start_date || !filters.end_date) {
        console.warn("‚ö†Ô∏è Les dates ne sont pas fournies, chargement de tous les h√¥tels.");
        fetchAllHotels(); // Charger tous les h√¥tels si pas de filtre
        return;
    }

    console.log("üîç Recherche avec filtres :", filters);

    try {
        const response = await fetch("/recherche", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(filters)
        });

        if (!response.ok) throw new Error(`Erreur: ${response.statusText}`);

        const hotels = await response.json();
        console.log("‚úÖ H√¥tels trouv√©s :", hotels);
        renderHotels(hotels);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des h√¥tels :", error);
    }
}

// ‚úÖ Gestion des √©v√©nements au chargement
document.addEventListener("DOMContentLoaded", function () {
    console.log("üöÄ Page charg√©e, r√©cup√©ration des h√¥tels...");

    const filters = getURLParams(); // R√©cup√®re les filtres envoy√©s depuis index.html
    if (filters.destination || filters.start_date) {
        console.log("üéØ Filtres d√©tect√©s, lancement de la recherche filtr√©e...");
        fetchFilteredHotels(); // üîç Applique les filtres si pr√©sents
    } else {
        console.log("üìå Aucun filtre d√©tect√©, chargement de tous les h√¥tels.");
        fetchAllHotels(); // üè® Charge tous les h√¥tels par d√©faut
    }

    // ‚úÖ V√©rifie que le formulaire de filtrage existe avant d'ajouter l'√©v√©nement
    const filterForm = document.getElementById('filterForm');
    if (filterForm) {
        console.log("‚úÖ Formulaire de filtrage trouv√© !");
        filterForm.addEventListener('submit', (event) => {
            event.preventDefault();
            applyFilters();
        });
    } else {
        console.error("‚ö†Ô∏è Le formulaire de filtrage 'filterForm' n'a pas √©t√© trouv√© !");
    }

    document.getElementById('reset-filters').addEventListener('click', resetFilters);

    // ‚úÖ Gestion du dropdown "nb adultes / nb enfants"
    const dropdown = document.getElementById("peopleDropdown");
    const inputField = document.getElementById("peopleInput");

    if (inputField && dropdown) {
        inputField.addEventListener("click", function (event) {
            event.stopPropagation();
            dropdown.classList.toggle("show");
        });

        document.addEventListener("click", function (event) {
            if (!dropdown.contains(event.target) && event.target !== inputField) {
                dropdown.classList.remove("show");
            }
        });

        function updatePeopleInput() {
            const adults = document.getElementById("adults").value;
            const children = document.getElementById("children").value;
            const pets = document.getElementById("pets").checked ? " - Animal ‚úÖ" : "";
            inputField.value = `${adults} adulte(s) - ${children} enfant(s)${pets}`;
        }

        document.getElementById("adults").addEventListener("change", updatePeopleInput);
        document.getElementById("children").addEventListener("change", updatePeopleInput);
        document.getElementById("pets").addEventListener("change", updatePeopleInput);
    } else {
        console.error("‚ùå Probl√®me avec le champ peopleInput ou peopleDropdown !");
    }
});

function redirectToReservation(hotelId) {
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set("hotel_id", hotelId); // Ajoute l'ID de l'h√¥tel aux param√®tres

    // üîÑ Redirige vers la page de r√©servation avec les param√®tres
    window.location.href = reservationLink;
}
