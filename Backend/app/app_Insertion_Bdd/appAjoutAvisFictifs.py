# FONCTION PERMETTANT D'AJOUTER DES AVIS FACTICES DANS LA BASE DE DONNEES HOTELS.DB

import sqlite3
import random
from datetime import datetime, timedelta

def ajouter_avis_fictifs():
    # Connexion unique √† la base de donn√©es
    conn = sqlite3.connect('hotels.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # R√©cup√©rer tous les utilisateurs
    cursor.execute("SELECT id_user FROM User")
    users = [row[0] for row in cursor.fetchall()]
    
    if not users:
        print("‚ö† Aucun utilisateur trouv√© dans la table User.")
        conn.close()
        return

    # R√©cup√©rer tous les h√¥tels
    cursor.execute("SELECT id FROM hotels")
    hotels = [row[0] for row in cursor.fetchall()]

    if not hotels:
        print("‚ö† Aucun h√¥tel trouv√© dans la table hotels.")
        conn.close()
        return

    # Liste d'avis possibles
    comments = [
        "Excellent s√©jour, personnel aux petits soins !",
        "Bon rapport qualit√©-prix, je reviendrai.",
        "La chambre √©tait propre et bien √©quip√©e.",
        "Tr√®s bruyant la nuit, difficile de dormir.",
        "Le service √©tait parfait, je recommande fortement !",
        "H√¥tel bien situ√©, proche du centre-ville.",
        "Le petit-d√©jeuner √©tait d√©licieux et vari√©.",
        "Piscine magnifique, mais eau un peu froide.",
        "Salle de sport bien √©quip√©e, un vrai plus.",
        "Chambres spacieuses et tr√®s confortables.",
        "Accueil chaleureux, personnel tr√®s aimable.",
        "La connexion Wi-Fi √©tait instable.",
        "Le spa est incroyable, tr√®s relaxant.",
        "Tr√®s bon s√©jour, mais un peu cher.",
        "La climatisation ne fonctionnait pas bien.",
        "Tr√®s bon restaurant dans l'h√¥tel, plats excellents.",
        "Vue superbe depuis la chambre !",
        "Manque de prises √©lectriques pr√®s du lit.",
        "H√¥tel moderne et tr√®s propre.",
        "Parking un peu cher, mais pratique."
    ]

    # Ajouter des avis pour chaque h√¥tel
    for hotel_id in hotels:
        num_reviews = random.randint(1, 10)  # Nombre d'avis par h√¥tel

        for _ in range(num_reviews):
            user_id = random.choice(users)
            rating = random.randint(7, 10)
            comment = random.choice(comments)

            # üìÖ G√©n√©rer une date al√©atoire entre 1 et 180 jours dans le pass√©
            days_ago = random.randint(1, 180)
            date_posted = (datetime.now() - timedelta(days=days_ago)).strftime('%Y-%m-%d')

            # Ins√©rer l'avis dans la table reviews
            cursor.execute('''
                INSERT INTO reviews (hotel_id, user_id, rating, comment, date_posted)
                VALUES (?, ?, ?, ?, ?)
            ''', (hotel_id, user_id, rating, comment, date_posted))

    # Valider les changements et fermer la connexion
    conn.commit()
    conn.close()
    
    print("‚úÖ Avis fictifs ins√©r√©s avec succ√®s.")

if __name__ == '__main__':
    print("üìå ajout des avis fictifs...")
    ajouter_avis_fictifs()